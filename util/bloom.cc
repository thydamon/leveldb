// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}
/*
 * Bloom Filter 相关结论
 * 1) 在判断一个元素是否属于某个集合时,有可能会把不属于这个集合的元素误认为属于这个集合(false positive)
 * 2) Bloom Filter通过极小的错误换取了存储空间的极大节省
 * 3) k = ln2(m/n)时取得最优的哈希函数个数
 * 4) 在错误率不大于є的情况下，m至少要等于n log2(1/є)才能表示任意n个元素的集合。
 * 5) 在哈希函数的个数取到最优时，要让错误率不超过є，m至少需要取到最小值的1.44倍。
 * */

class BloomFilterPolicy : public FilterPolicy 
{
 private:
  // 每个key所占的bit(粗略),将按照该值分配filter大小
  size_t bits_per_key_;
  // 每个key散列到数组中的bit数,略小于bits_per_key
  size_t k_;

 public:
  explicit BloomFilterPolicy(int bits_per_key)
      : bits_per_key_(bits_per_key) 
  {
    // We intentionally round down to reduce probing cost a little bit
	// 结论3,取的最优的哈希函数个数
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  virtual const char* Name() const 
  {
    return "leveldb.BuiltinBloomFilter2";
  }

  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const 
  {
    // Compute bloom filter size (in both bits and bytes)
	// 根据n个键,设置n个位
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;
    
	// 向上取整,使bits位刚好是8的倍数,即整数个字节
    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
	// 将每条过滤器添加在总过滤器之后
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    char* array = &(*dst)[init_size]; // array指向dst未使用的首位置
    for (int i = 0; i < n; i++) 
	{
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
	  // 计算键值的哈希值
      uint32_t h = BloomHash(keys[i]);
	  // 向右循环位移17位
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) 
	  {
		// 通过hash值,取得需要设置的位置
        const uint32_t bitpos = h % bits;
		// 将相应位设置为1
        array[bitpos/8] |= (1 << (bitpos % 8));
		// 重复计算哈希值,计算k_值
        h += delta;
      }
    }
  }

  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const 
  {
	// 一条Filter的大小
    const size_t len = bloom_filter.size();
    if (len < 2) return false;
    
	// 一条Filter的数据
    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len-1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }
    
	// 查询键值的哈希值
    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) 
	{
      const uint32_t bitpos = h % bits;
	  // 进行验证,必须k次数据都为1,否则出错
      if ((array[bitpos/8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }
};
}

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
